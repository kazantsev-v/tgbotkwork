const { Markup } = require('telegraf');
const axios = require('axios');
const { config } = require('../config/config');
const { getAllApprovedTasks, getTaskById } = require('./task');
const { getUsersProfile } = require('./user');
const { formatDate } = require('./common');

// –ú–∞—Å—Å–∏–≤ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ API –∏–ª–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
let notificationChatIds = [];

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
const loadNotificationChats = async () => {
    try {
        const response = await axios.get(`${config.backendURL}/notification-chats`);
        if (response.data && Array.isArray(response.data)) {
            notificationChatIds = response.data.map(chat => chat.chatId);
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${notificationChatIds.length} —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
        }
        return notificationChatIds;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        return [];
    }
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @param {string} chatId ID —á–∞—Ç–∞
 * @param {string} chatTitle –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
 * @param {string} chatType –¢–∏–ø —á–∞—Ç–∞ (group, supergroup)
 */
const addNotificationChat = async (chatId, chatTitle, chatType) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if (notificationChatIds.includes(chatId)) {
            return true;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const response = await axios.post(`${config.backendURL}/notification-chats`, {
            chatId,
            chatTitle,
            chatType
        });
        
        if (response.data) {
            notificationChatIds.push(chatId);
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${chatTitle} (${chatId})`);
            return true;
        }
        return false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        return false;
    }
};

/**
 * –£–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @param {string} chatId ID —á–∞—Ç–∞
 */
const removeNotificationChat = async (chatId) => {
    try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await axios.delete(`${config.backendURL}/notification-chats/${chatId}`);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        notificationChatIds = notificationChatIds.filter(id => id !== chatId);
        console.log(`–£–¥–∞–ª–µ–Ω —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${chatId}`);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        return false;
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
 * @param {object} bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {object} task –û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è
 * @param {boolean} isApproved –§–ª–∞–≥, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
 */
const sendTaskNotification = async (bot, task, isApproved = false) => {
    try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        if (notificationChatIds.length === 0) {
            await loadNotificationChats();
        }
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
        if (isApproved && task.id) {
            const freshTask = await getTaskById(task.id);
            if (freshTask) {
                task = freshTask;
            }
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏
        const message = formatTaskNotification(task, isApproved);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `view_notification_task_${task.id}`)],
            [Markup.button.callback('üíº –í–∑—è—Ç—å –∑–∞–∫–∞–∑', `take_notification_task_${task.id}`)]
        ]);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const workers = await getWorkersToNotify();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º
        for (const worker of workers) {
            try {
                await bot.telegram.sendMessage(worker.telegramId, message, {
                    parse_mode: 'HTML',
                    ...keyboard
                });
                console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ ${task.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${worker.telegramId}`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${worker.telegramId}:`, error.message);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
        for (const chatId of notificationChatIds) {
            try {
                await bot.telegram.sendMessage(chatId, message, {
                    parse_mode: 'HTML',
                    ...keyboard
                });
                console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ ${task.id} –≤ —á–∞—Ç ${chatId}`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
                
                // –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —á–∞—Ç–∞, —É–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                if (error.message.includes('bot was kicked') || 
                    error.message.includes('chat not found') || 
                    error.message.includes('bot was blocked')) {
                    await removeNotificationChat(chatId);
                }
            }
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞–Ω–∏–∏:', error.message);
        return false;
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏—Ö
 */
const getWorkersToNotify = async () => {
    try {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.
        const response = await axios.get(`${config.backendURL}/users/workers`);
        return response.data || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        return [];
    }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {object} task –û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è
 * @param {boolean} isApproved –§–ª–∞–≥, –æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML
 */
const formatTaskNotification = (task, isApproved) => {
    const statusBadge = isApproved ? '‚úÖ –û–î–û–ë–†–ï–ù–û' : 'üÜï –ù–û–í–û–ï';
    const dates = Array.isArray(task.dates) ? task.dates.join(', ') : task.dates;
    
    return `
<b>${statusBadge} –ó–ê–î–ê–ù–ò–ï</b>

<b>üìã –ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${task.title}
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> ${task.description}
<b>üí∞ –û–ø–ª–∞—Ç–∞:</b> ${task.payment} —Ä—É–±.
<b>üìç –ú–µ—Å—Ç–æ:</b> ${task.location}
<b>üìÖ –î–∞—Ç—ã:</b> ${dates}
<b>‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> ${task.start_time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${task.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á.

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ "–í–∑—è—Ç—å –∑–∞–∫–∞–∑" —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.</i>
`;
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö, –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
 * @param {object} bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
const sendNewTasksNotifications = async (bot) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        const approvedTasks = await getAllApprovedTasks();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ notificationSent –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const tasksToNotify = approvedTasks.filter(task => 
            task.status === 'approved' && !task.notificationSent);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${tasksToNotify.length} –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é
        for (const task of tasksToNotify) {
            await sendTaskNotification(bot, task, true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await axios.patch(`${config.backendURL}/tasks/${task.id}`, {
                notificationSent: true
            });
        }
        
        return tasksToNotify.length;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö:', error.message);
        return 0;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    loadNotificationChats,
    addNotificationChat,
    removeNotificationChat,
    sendTaskNotification,
    sendNewTasksNotifications,
    formatTaskNotification
};