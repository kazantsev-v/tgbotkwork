const { Scenes, Markup } = require('telegraf');
const { 
    updateUserSceneStep
} = require('../utils/user');
const { 
    updateStep
} = require('../utils/common');
const { 
    getTaskById, 
    getTasksByCreatorId, 
    getPhotosByTaskId 
} = require('../utils/task');

function formatDate(date) {
    return new Date(date).toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
    });
}

async function loadTasks(ctx) {
    if(!ctx?.session) throw Error('no session/context in loadTask function');
    try {
        const tasks = await getTasksByCreatorId(ctx.session.userId);
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ tasks === undefined –∏–ª–∏ null
        if(!tasks || !tasks.length) return [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.all –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        const tasksWithPhotos = await Promise.all(tasks.map(async task => {
            try {
                const photos = await getPhotosByTaskId(task.id);
                return {...task, photos};
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}:`, error.message);
                return {...task, photos: []};
            }
        }));
        
        return tasksWithPhotos;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π:", error.message);
        return [];
    }
}

async function showTasks(ctx, tasks) {
    const buttons = tasks.map((task) =>
        Markup.button.callback(task.title, `view_task_${task.id}`)
    );

    await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:', Markup.inlineKeyboard(buttons, { columns: 1 }));
}

const customerTasksScene = new Scenes.BaseScene('customerTasksScene');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
customerTasksScene.enter(async (ctx) => {
    const tasks = await loadTasks(ctx);
    if (!tasks.length) {
        await updateStep(
            ctx, 
            'showTasks',
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.', 
            Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
        );
    } else {
        await updateStep(
            ctx, 
            'showTasks',
            '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', 
            Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
        );
    }

    await showTasks(ctx, tasks);
});

customerTasksScene.hears('–ù–∞–∑–∞–¥', async (ctx) => {
    if(ctx.session.step = 'showTasks')
        await ctx.scene.enter('mainScene');
    else {
        const tasks = await loadTasks(ctx);
        if (!tasks.length) {
            await updateStep(
                ctx, 
                'showTasks',
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.', 
                Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
            );
        } else {
            await updateStep(
                ctx, 
                'showTasks',
                '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', 
                Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
            );
        }
        await showTasks(ctx, tasks);
    }
});

customerTasksScene.action(/^view_task_\d+$/, async (ctx) => {
    try {
        ctx.session.step = 'viewTask';
        await updateUserSceneStep(ctx.from.id, ctx.scene.current.id, ctx.session.step);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback data
        const taskId = parseInt(ctx.match[0].split('_')[2]);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        const tasks = await loadTasks(ctx);
        let task = tasks.find(t => t.id === taskId);
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if (!task) {
            console.log(`–ó–∞–¥–∞–Ω–∏–µ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é`);
            try {
                task = await getTaskById(taskId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
                if (task) {
                    task.photos = await getPhotosByTaskId(taskId);
                }
            } catch (directError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è ${taskId}:`, directError.message);
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!task) {
            await ctx.answerCbQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.');
        }

        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–Ω–∞—á–∞–ª–∞ callback –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É
        await ctx.answerCbQuery();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        await ctx.replyWithHTML(
            `<b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏:</b>\n\n` +
            `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${task.title}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${task.description}\n` +
            `<b>–û–ø–ª–∞—Ç–∞:</b> ${task.payment}\n` +
            `<b>–£–ø–∞–∫–æ–≤–∫–∞ –Ω–∞—à–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º:</b> ${task.pack_needed ? `–î–∞ (${task.pack_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> ${task.tool_needed ? `–î–∞ (${task.tool_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–°–±–æ—Ä–∫–∞/–†–∞–∑–±–æ—Ä–∫–∞:</b> ${task.assemble_needed ? `–î–∞ (${task.assemble_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${formatDate(task.created_at)}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> ${task.moderator_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${task.location}\n` +
            `<b>–î–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${Array.isArray(task.dates) ? task.dates.join(', ') : task.dates}\n` +
            `<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> ${task.start_time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ${task.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á\n` +
            `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${task.executor?.name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${task.status || '–Ω–æ–≤–æ–µ'}\n`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (task.photos && task.photos.length) {
            for (const photo of task.photos) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
                    if (typeof photo === 'string') {
                        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ —Å http
                        if (photo.startsWith("http")) {
                            await ctx.replyWithPhoto({ url: photo });
                        } else {
                            await ctx.replyWithPhoto(photo);
                        }
                    } else if (photo && photo.url) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å URL
                        await ctx.replyWithPhoto({ url: photo.url });
                    } else if (photo && photo.file_id) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å file_id
                        await ctx.replyWithPhoto(photo.file_id);
                    } else {
                        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ:', photo);
                    }
                } catch (photoError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId}:`, photoError.message);
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º
        await ctx.reply(
            '–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `refresh_task_${taskId}`)],
                [Markup.button.callback('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π', 'back_to_tasks')]
            ])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞–Ω–∏—è:', error.message);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
customerTasksScene.action(/^refresh_task_\d+$/, async (ctx) => {
    try {
        await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è–µ–º...');
        const taskId = parseInt(ctx.match[0].split('_')[2]);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const task = await getTaskById(taskId);
        
        if (!task) {
            return ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        task.photos = await getPhotosByTaskId(taskId);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        await ctx.replyWithHTML(
            `<b>–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏:</b>\n\n` +
            `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${task.title}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${task.description}\n` +
            `<b>–û–ø–ª–∞—Ç–∞:</b> ${task.payment}\n` +
            `<b>–£–ø–∞–∫–æ–≤–∫–∞ –Ω–∞—à–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º:</b> ${task.pack_needed ? `–î–∞ (${task.pack_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> ${task.tool_needed ? `–î–∞ (${task.tool_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–°–±–æ—Ä–∫–∞/–†–∞–∑–±–æ—Ä–∫–∞:</b> ${task.assemble_needed ? `–î–∞ (${task.assemble_description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'})` : '–ù–µ—Ç'}\n` +
            `<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${formatDate(task.created_at)}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> ${task.moderator_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${task.location}\n` +
            `<b>–î–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${Array.isArray(task.dates) ? task.dates.join(', ') : task.dates}\n` +
            `<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> ${task.start_time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ${task.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á\n` +
            `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${task.executor?.name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${task.status || '–Ω–æ–≤–æ–µ'}\n`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (task.photos && task.photos.length) {
            for (const photo of task.photos) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
                    if (typeof photo === 'string') {
                        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ —Å http
                        if (photo.startsWith("http")) {
                            await ctx.replyWithPhoto({ url: photo });
                        } else {
                            await ctx.replyWithPhoto(photo);
                        }
                    } else if (photo && photo.url) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å URL
                        await ctx.replyWithPhoto({ url: photo.url });
                    } else if (photo && photo.file_id) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å file_id
                        await ctx.replyWithPhoto(photo.file_id);
                    } else {
                        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ:', photo);
                    }
                } catch (photoError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId}:`, photoError.message);
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º
        await ctx.reply(
            '–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `refresh_task_${taskId}`)],
                [Markup.button.callback('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π', 'back_to_tasks')]
            ])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error.message);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π"
customerTasksScene.action('back_to_tasks', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        ctx.session.step = 'showTasks';
        await updateUserSceneStep(ctx.from.id, ctx.scene.current.id, ctx.session.step);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ
        const tasks = await loadTasks(ctx);
        
        if (!tasks.length) {
            await updateStep(
                ctx, 
                'showTasks',
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.', 
                Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
            );
        } else {
            await updateStep(
                ctx, 
                'showTasks',
                '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', 
                Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize()
            );
        }

        await showTasks(ctx, tasks);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π:', error.message);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
        await ctx.scene.enter('mainScene');
    }
});

module.exports = customerTasksScene;
