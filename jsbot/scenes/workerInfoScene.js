const { Scenes, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const { 
    generateTimeKeyboard, 
    generateWeekdayKeyboard, 
    generateWorkDaysKeyboard, 
    daysOfWeek 
} = require('../utils/keyboards');
const { 
    validateFullName, 
    validateCardNumber, 
    validatePhone,
    validateSBP
} = require('../utils/validators');
const { 
    getNearestMetroStation, 
    getStationCoordinates,
    saveDocument,
    updateStep
} = require('../utils/common');
const { 
    updateUserSceneStep
} = require('../utils/user');
const { metro_stations } = require('../models/common');


const workerInfoScene = new Scenes.BaseScene('workerInfoScene');

    workerInfoScene.enter(async (ctx) => {
        ctx.session.workerInfo = {};
        ctx.session.step = 'fullName';
        await updateUserSceneStep(ctx.from.id, ctx.scene.current.id, ctx.session.step);
        if(process.env.NODE_ENV === 'development')
            ctx.session.step = 'fullName';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    });

    workerInfoScene.on(message('text'), async (ctx, next) => {
        console.log('in text handler');
        switch (ctx.session.step) {
            case 'fullName':
                if(validateFullName(ctx.message.text)) {
                    ctx.session.workerInfo.fullName = ctx.message.text;
                    ctx.session.step = 'geolocation';
                    await ctx.reply('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 
                        Markup.keyboard([
                            Markup.button.locationRequest('üåç–ü–æ–¥–µ–ª–∏—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'),
                            Markup.button.callback('üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', 'g_location'),
                            Markup.button.callback('üöä–í—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:', 'm_location'),
                            Markup.button.callback('‚úçüèª–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', 'direct_location'),
                        ])
                    );
                } else {
                    await ctx.reply('–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á');
                }
                break;
            case 'geolocation':
                if(ctx.message.text === 'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é') {
                    await ctx.reply('üåç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å ‚Üí üåç–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è', Markup.removeKeyboard());
                } else if(ctx.message.text === 'üöä–í—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:') {
                    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:', 
                        Markup.inlineKeyboard(
                            metro_stations.map(station => [Markup.button.callback(station, `metro_${station}`)])
                        )
                    );
                } else if(ctx.message.text === '‚úçüèª–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é') {
                    ctx.session.step = 'direct_address';
                    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:', Markup.removeKeyboard());
                }
                break;
            case 'direct_address':
                ctx.session.workerInfo.address = ctx.message.text;
                ctx.session.workerInfo.location = null;
                ctx.session.workerInfo.metroStation = null;
                ctx.session.step = 'paymentDetails';
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã):');
                break;
            case 'paymentDetails':
                if (validateCardNumber(ctx.message.text) || validateSBP(ctx.message.text)) {
                    ctx.session.workerInfo.paymentDetails = ctx.message.text;
                    ctx.session.step = 'photo';
                    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:');
                } else {
                    await ctx.reply('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –°–ë–ü.');
                }
                break;
            case 'photo':
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.');
                break;
            case 'workHours':
                ctx.session.workerInfo.workHours = ctx.message.text;
                ctx.session.step = 'phone';
                await ctx.reply('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
                    Markup.keyboard([
                        Markup.button.contactRequest('üì≤ –ü–æ–¥–µ–ª–∏—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
                        Markup.button.callback('–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'custom_phone_input')
                    ])
                );
                break;
            case 'phone':
                const phone = ctx.message.text;
                if (validatePhone(phone)) {
                    ctx.session.workerInfo.phone = phone;
                    console.log(ctx.session.workerInfo);
                    ctx.scene.enter('roleInfoScene');
                } else {
                    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
                }
                break;
        }
    });

    /*workerInfoScene.action(/m_location/, async (ctx, next) => {
        console.log('in m_location');
        await ctx.reply('üåç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å ‚Üí üåç–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è');
    });

    workerInfoScene.action(/g_location/, async (ctx, next) => {
        console.log('in g_location handler');
        ctx.session.step = 'geolocation';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:', 
            Markup.inlineKeyboard(
                metro_stations.map(station => [Markup.button.callback(station, `metro_${station}`)])
            )
        );
    });*/
    
    workerInfoScene.action(/metro_(.+)/, async (ctx, next) => {
        console.log('in metro handler');
        ctx.session.workerInfo.metroStation = ctx.match[1];
        ctx.session.workerInfo.location = getStationCoordinates(ctx.session.workerInfo.metroStation);
        ctx.session.workerInfo.address = ctx.session.workerInfo.metroStation;
        ctx.session.step = 'paymentDetails';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã):');
    });

    workerInfoScene.action(/time_(\d+)/, async (ctx) => {
        console.log('in time handler');
        const selectedTime = parseInt(ctx.match[1]);
        
        if (!ctx.session.workerInfo.startTime) {
            ctx.session.workerInfo.startTime = selectedTime;
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', await generateTimeKeyboard());
        } else {
            ctx.session.workerInfo.endTime = selectedTime;
            await ctx.reply(`–í–∞—à —Ä–∞–±–æ—á–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: —Å ${ctx.session.workerInfo.startTime}:00 –¥–æ ${ctx.session.workerInfo.endTime}:00.`);
            ctx.session.step = 'phone';
                await ctx.reply('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
                    Markup.keyboard([
                        Markup.button.contactRequest('üì≤ –ü–æ–¥–µ–ª–∏—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
                        Markup.button.callback('–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'custom_phone_input')
                    ])
                );
        }
    });

    workerInfoScene.action(/day_(\w+)/, async (ctx) => {
        const selectedDay = ctx.match[1];
        const workDays = ctx.session.workerInfo.workDays || [];
    
        // –ï—Å–ª–∏ –¥–µ–Ω—å –≤—ã–±—Ä–∞–Ω, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
        if (workDays.includes(selectedDay)) {
            ctx.session.workerInfo.workDays = workDays.filter(day => day !== selectedDay);
        } else {
            ctx.session.workerInfo.workDays.push(selectedDay);
        }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try {
        await ctx.editMessageText(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:',
            { reply_markup: generateWorkDaysKeyboard(ctx.session.workerInfo.workDays).reply_markup }
        );
    } catch (error) {
        // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:', generateWorkDaysKeyboard(ctx.session.workerInfo.workDays));
    }
    });

    workerInfoScene.action('confirm_days', async (ctx) => {
        if (ctx.session.workerInfo.workDays && ctx.session.workerInfo.workDays.length > 0) {
            await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: ${ctx.session.workerInfo.workDays.map(day => {
                return daysOfWeek.find(d => d.id === day).text
            }).join(', ')}`);
            ctx.session.step = 'workHours';
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', await generateTimeKeyboard());
        } else {
            await ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏!');
        }
    });
    
    workerInfoScene.on(message('photo'), async (ctx, next) => {
        console.log('in photo handler');
        const photo = ctx.message.photo;
        if (!photo || photo.length === 0) {
            return await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        const highResolutionPhoto = photo[photo.length - 1];
        ctx.session.workerInfo.photo = highResolutionPhoto.file_id;
        const fileLink = await ctx.telegram.getFileLink(highResolutionPhoto.file_id);
        const doclink = await saveDocument(fileLink, highResolutionPhoto.file_id);
        ctx.session.workerInfo.photoLink = doclink
        ctx.session.step = 'workDays';
        if(!ctx.session.workerInfo.workDays)
            ctx.session.workerInfo.workDays = [];
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏', await generateWorkDaysKeyboard(ctx.session.workerInfo.workDays));
    });

    workerInfoScene.on(message('contact'), async (ctx) => {
        console.log('in phone handler');
        console.log(ctx.message.contact.phone_number);
        ctx.session.workerInfo.phone = ctx.message.contact.phone_number;
        console.log(ctx.session.workerInfo);
        ctx.scene.enter('roleInfoScene');
    });

    workerInfoScene.on(message('location'), async (ctx, next) => {
        console.log('in location handler');
        ctx.session.workerInfo.location = {
            latitude: ctx.message.location.latitude, 
            longitude: ctx.message.location.longitude
        };

        ctx.session.workerInfo.metroStation = getNearestMetroStation(ctx.message.location).name;
        ctx.session.workerInfo.address = ctx.session.workerInfo.metroStation;
        ctx.session.step = 'paymentDetails';
        await ctx.reply(`–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: ${ctx.session.workerInfo.metroStation}`);
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã):');
    });
    
    module.exports = workerInfoScene;