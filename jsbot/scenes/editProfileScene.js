const { Scenes, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const { 
    generateTimeKeyboard, 
    generateWeekdayKeyboard, 
    generateWorkDaysKeyboard, 
    daysOfWeek 
} = require('../utils/keyboards');
const { updateUserSceneStep } = require('../utils/user');
const { updateStep } = require('../utils/common');
const { metro_stations } = require('../models/common');


const editProfileScene = new Scenes.BaseScene('editProfileScene');
let isCustomer;
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
const fieldsForCustomer = {
    fullName: '–§–ò–û',
    photo: '–§–æ—Ç–æ',
    companyName: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
    phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
    additionalContacts: '–î–æ–ø. –ö–æ–Ω—Ç–∞–∫—Ç—ã',
    documentPath: '–†–µ–∫–≤–∏–∑–∏—Ç—ã'
};

const fieldsForWorker = {
    fullName: '–§–ò–û',
    photo: '–§–æ—Ç–æ',
    metroStation: '–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ',
    location: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è',
    address: '–ê–¥—Ä–µ—Å',
    paymentDetails: '–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã',
    workDays: '–†–∞–±–æ—á–∏–µ –¥–Ω–∏',
    startTime: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞',
    endTime: '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è',
    phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
    role: '–†–æ–ª—å',
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
async function updateProfile(userId, updatedData) {
    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –¥–∞–Ω–Ω—ã–º–∏:`, updatedData);
    // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
}

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
editProfileScene.enter(async (ctx) => {
    isCustomer = ctx.session.role === 'customer';
    const fields = isCustomer ? fieldsForCustomer : fieldsForWorker;

    await updateStep(
        ctx, 
        'choose',
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
        Markup.inlineKeyboard(
            Object.entries(fields).map(([key, label]) => [
                Markup.button.callback(label, `edit_${key}`),
            ]).concat([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_profile')]])
        ).resize(2)
    )
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
editProfileScene.action(/^edit_(.+)$/, async (ctx) => {
    const field = ctx.match[1];
    ctx.session.editField = field;

    const fields = ctx.session.role === 'customer' ? fieldsForCustomer : fieldsForWorker;
    const fieldLabel = fields[field] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ';

    switch (field) {
        case 'photo':
            await updateStep(ctx, 'photo', '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.')
            break;

        case 'workDays':
            await updateStep(ctx, 'workDays', '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ.', generateWorkDaysKeyboard(ctx.session.workerInfo.workDays))
            break;

        case 'startTime':
            await updateStep(
                ctx, 
                'startTime', 
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', 
                await generateTimeKeyboard()
            )
            break;
            
        case 'endTime':
            await updateStep(
                ctx, 
                'endTime', 
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', 
                await generateTimeKeyboard()
            )
            break;

        case 'role':
            ctx.session.step = 'roleChange'
            await ctx.scene.enter("workerRoleSelectionScene");
            break;
        case 'documentPath':
            await ctx.scene.enter("roleInfoScene");
            break;
        case 'address':
            await updateStep(ctx, 'direct_address', '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: ', Markup.removeKeyboard())
            break;
        case 'location':
            await updateStep(
                ctx, 
                'location', 
                '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 
                Markup.keyboard([
                    Markup.button.locationRequest('üåç–ü–æ–¥–µ–ª–∏—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'),
                    Markup.button.callback('üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', 'g_location'),
                ]));
            break;
        case 'paymentDetails':
            await updateStep(
                ctx, 
                'paymentMethod', 
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:', 
                Markup.keyboard([
                    Markup.button.callback('–°–ë–ü', 'sbp'),
                    Markup.button.callback('–ù–æ–º–µ—Ä –ö–∞—Ä—Ç—ã', 'card'),
                ])
            );
            break;
        default:
            ctx.scene.state.awaitingInput = true;
            await ctx.reply(
                `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "${fieldLabel}":`,
                Markup.keyboard([['–û—Ç–º–µ–Ω–∏—Ç—å']]).resize())
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è)
editProfileScene.on(message('text'), async (ctx) => {
    if (ctx.message.text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
        await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard());
        return ctx.scene.reenter();
    }

    if (ctx.message.text === '–ù–∞–∑–∞–¥') {
        await ctx.scene.enter('profileScene');
        return ctx.scene.reenter();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    if (ctx.session.step === 'paymentMethod') {
        if (ctx.message.text === '–°–ë–ü') {
            await updateStep(
                ctx, 
                'sbpNumber',
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –°–ë–ü:'
            );
            return;
        } else if (ctx.message.text === '–ù–æ–º–µ—Ä –ö–∞—Ä—Ç—ã') {
            await updateStep(
                ctx, 
                'cardNumber',
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:'
            );
            return;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –°–ë–ü –Ω–æ–º–µ—Ä–∞
    if (ctx.session.step === 'sbpNumber') {
        if (validateSBP(ctx.message.text)) {
            ctx.session.workerInfo.paymentDetails = `–°–ë–ü: ${ctx.message.text}`;
            await updateStep(
                ctx, 
                'choose',
                '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
            );
            ctx.scene.state.awaitingInput = false;
            return ctx.scene.reenter();
        } else {
            await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–• –∏–ª–∏ 8–•–•–•–•–•–•–•–•–•–•');
            return;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if (ctx.session.step === 'cardNumber') {
        if (validateCardNumber(ctx.message.text)) {
            ctx.session.workerInfo.paymentDetails = `–ö–∞—Ä—Ç–∞: ${ctx.message.text}`;
            await updateStep(
                ctx, 
                'choose',
                '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
            );
            ctx.scene.state.awaitingInput = false;
            return ctx.scene.reenter();
        } else {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).');
            return;
        }
    }

    if (ctx.message.text === 'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é') {
        await ctx.reply('üåç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å ‚Üí üåç–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è', Markup.removeKeyboard());
        return;
    }

    if (ctx.scene.state.awaitingInput) {
        const field = ctx.session.editField;
        const newValue = ctx.message.text;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
        ctx.session[isCustomer?"customerInfo":"workerInfo"] = ctx.session[isCustomer?"customerInfo":"workerInfo"] || {};
        ctx.session[isCustomer?"customerInfo":"workerInfo"][field] = newValue;

        await updateProfile(ctx.from.id, { [field]: newValue });

        const fields = ctx.session.role === 'customer' ? fieldsForCustomer : fieldsForWorker;
        const fieldLabel = fields[field] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ';

        await ctx.reply(`–ü–æ–ª–µ "${fieldLabel}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${newValue}".`);
        ctx.scene.state.awaitingInput = false;

        return ctx.scene.reenter();
    }
});

editProfileScene.on(message('location'), async (ctx, next) => {
    console.log('in location handler');
    ctx.session.workerInfo.location = {
        latitude: ctx.message.location.latitude, 
        longitude: ctx.message.location.longitude
    };
    await updateProfile(ctx.from.id, { [field]: newValue });
    await ctx.reply(`–ü–æ–ª–µ "${fieldsForWorker[ctx.session.editField]}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${ctx.session.workerInfo.location}".`);
    ctx.session.step = 'choose';
    ctx.scene.state.awaitingInput = false;
    return ctx.scene.reenter();
});

editProfileScene.action(/time_(\d+)/, async (ctx) => {
    const selectedTime = parseInt(ctx.match[1]);
    if(ctx.session.step === 'startTime') {
        ctx.session.workerInfo.startTime = selectedTime;
        await updateStep(
            ctx, 
            'choose', 
            `–í–∞—à –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: —Å ${ctx.session.workerInfo.startTime}:00 –¥–æ ${ctx.session.workerInfo.endTime}:00.`
        )
        ctx.scene.state.awaitingInput = false;
        return ctx.scene.reenter();
    } else if (ctx.session.step === 'endTime') {       
        ctx.session.workerInfo.endTime = selectedTime;
        await updateStep(
            ctx, 
            'choose', 
            `–í–∞—à –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: —Å ${ctx.session.workerInfo.startTime}:00 –¥–æ ${ctx.session.workerInfo.endTime}:00.`
        )
        ctx.scene.state.awaitingInput = false;
        return ctx.scene.reenter();
    }
});

editProfileScene.action(/day_(\w+)/, async (ctx) => {
    const selectedDay = ctx.match[1];
    if(!ctx.session.workerInfo.workDays) ctx.session.workerInfo.workDays = []
    const workDays = ctx.session.workerInfo.workDays;

    // –ï—Å–ª–∏ –¥–µ–Ω—å –≤—ã–±—Ä–∞–Ω, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    if (workDays.includes(selectedDay)) {
        ctx.session.workerInfo.workDays = workDays.filter(day => day !== selectedDay);
    } else {
        ctx.session.workerInfo.workDays.push(selectedDay);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try {
        await ctx.editMessageText(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:',
            { reply_markup: generateWorkDaysKeyboard(ctx.session.workerInfo.workDays).reply_markup }
        );
    } catch (error) {
        // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏:', generateWorkDaysKeyboard(ctx.session.workerInfo.workDays));
    }
});

editProfileScene.action('confirm_days', async (ctx) => {
    if (ctx.session.workerInfo.workDays && ctx.session.workerInfo.workDays.length > 0) {
        await updateStep(
            ctx, 
            'choose', 
            await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏: ${ctx.session.workerInfo.workDays.map(day => {
                return daysOfWeek.find(d => d.id === day).text
            }).join(', ')}`)
        )
        ctx.scene.state.awaitingInput = false;
        return ctx.scene.reenter();
    } else {
        await ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏!', Markup.keyboard([['–û—Ç–º–µ–Ω–∏—Ç—å']]).resize());
    }
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
editProfileScene.action('back_to_profile', async (ctx) => {
    await ctx.scene.enter('profileScene');
});

editProfileScene.on(message('photo'), async (ctx) => {
    if(ctx.session.step === 'photo') {
        const photo = ctx.message.photo.pop();
        ctx.session[isCustomer?"customerInfo":"workerInfo"].photo = photo.file_id;
        await updateStep(
            ctx, 
            'choose',
            '–§–æ—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ'
        );
        ctx.scene.state.awaitingInput = false;
        return ctx.scene.reenter();
    } else {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥', Markup.keyboard([['–û—Ç–º–µ–Ω–∏—Ç—å']]).resize());
    }
});

module.exports = editProfileScene;
